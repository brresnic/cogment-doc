"use strict";(self.webpackChunkcogment_doc=self.webpackChunkcogment_doc||[]).push([[204],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),g=r,h=d["".concat(l,".").concat(g)]||d[g]||m[g]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1728:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={title:"Core Concepts",sidebar_position:1},l="Cogment Core Concepts Guide",c={unversionedId:"concepts/core-concepts",id:"concepts/core-concepts",title:"Core Concepts",description:"Welcome to the Cogment core concepts guide. It contains information that is pertinent to both the high-level SDK and the low-level API.",source:"@site/docs/concepts/core-concepts.md",sourceDirName:"concepts",slug:"/concepts/core-concepts",permalink:"/docs/concepts/core-concepts",tags:[],version:"current",lastUpdatedAt:1645720139,formattedLastUpdatedAt:"2/24/2022",sidebarPosition:1,frontMatter:{title:"Core Concepts",sidebar_position:1},sidebar:"docSidebar",previous:{title:"Community",permalink:"/docs/support/community-channels"},next:{title:"Glossary",permalink:"/docs/concepts/glossary"}},p=[{value:"Core Concepts",id:"core-concepts",children:[{value:"Trials",id:"trials",children:[],level:3},{value:"Actors",id:"actors",children:[],level:3},{value:"Environment",id:"environment",children:[],level:3}],level:2},{value:"The specifications file",id:"the-specifications-file",children:[],level:2},{value:"Architecture",id:"architecture",children:[{value:"Orchestrator",id:"orchestrator",children:[],level:3},{value:"Controller",id:"controller",children:[],level:3},{value:"Environment",id:"environment-1",children:[],level:3},{value:"Actors",id:"actors-1",children:[],level:3},{value:"Additional components",id:"additional-components",children:[],level:3}],level:2},{value:"Components availability summary",id:"components-availability-summary",children:[],level:2}],m={toc:p};function d(e){var t=e.components,s=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cogment-core-concepts-guide"},"Cogment Core Concepts Guide"),(0,o.kt)("p",null,"Welcome to the Cogment core concepts guide. It contains information that is pertinent to both the ",(0,o.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-api-guide"},"high-level SDK")," and the ",(0,o.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-low-level-api-guide/overview"},"low-level API"),"."),(0,o.kt)("h2",{id:"core-concepts"},"Core Concepts"),(0,o.kt)("p",null,"Cogment is built around concepts adapted from multi-agent systems (agents, environment), Markov decision processes (action and observation space) and reinforcement learning (trials, rewards)."),(0,o.kt)("h3",{id:"trials"},"Trials"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#trial"},"Trials")," are what a Cogment deployment runs. They enable ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#actors"},"Actors")," to interact with their ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#environment"},"Environment"),". Trials are started by clients connecting to Cogment. A trial can end either by being terminated from a client or end by itself, for example once a specific state of the Environment is reached."),(0,o.kt)("p",null,"During the trial:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#environment"},"Environment")," generates ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#observation"},(0,o.kt)("strong",{parentName:"a"},"observations"))," of its internal state and sends them to the ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#actor"},"actors"),"."),(0,o.kt)("li",{parentName:"ul"},"Given these ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#observation"},"observations"),", each ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#actor"},"actor")," chooses and sends an ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#action"},(0,o.kt)("strong",{parentName:"a"},"action")),"."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#environment"},"Environment")," receives the ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#action"},"actions")," and updates its state."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#reward"},(0,o.kt)("strong",{parentName:"a"},"Rewards"))," can be sent to the ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#actor"},"actors")," from either the environment or other actors."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#actor"},"Actors")," receive ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#reward"},(0,o.kt)("strong",{parentName:"a"},"rewards")),"."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#actor"},"actors")," or the ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#environment"},"environment")," can send ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#message"},(0,o.kt)("strong",{parentName:"a"},"messages"))," to actors or the environment."),(0,o.kt)("li",{parentName:"ul"},"A log of the activity during the trial (observations, actions, rewards & messages) is produced and can be stored.")),(0,o.kt)("p",null,"A trial is defined by the participating ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#actor"},"Actors")," and the host ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#environment"},"Environment"),". As a concept, Trials are quite close to Reinforcement Learning's ",(0,o.kt)("strong",{parentName:"p"},"Episodes"),", i.e. all the states that come between an initial state and a terminal state. However, because Cogment can be used outside of an RL context, we prefer using the more generic term of Trial."),(0,o.kt)("h3",{id:"actors"},"Actors"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#actor"},"Actors")," within a trial instantiate ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#actor-class"},"actor classes")," defined by the nature of the information they receive from the ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#environment"},"environment"),", their ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#observation-space"},"observation space"),", and what actions they can perform, their ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#action-space"},"action space"),"."),(0,o.kt)("p",null,"In Cogment, the observation and action space are defined as typed data structures. In particular, Cogment uses ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#protocol-buffer"},"protobuf")," as a format to specify these data structures. This typing defines both an interface contract between the ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#actor"},"Actors")," and the ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#environment"},"Environment")," and helps convey semantic information, thus facilitating the independent design and development of both."),(0,o.kt)("p",null,"An ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#actor"},"Actor")," might be controlled either by a software ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#agent"},"Agent"),", or by a Human. Whichever the case, the process of generating ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#action"},"actions")," based on ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#observation"},"observations")," remains the same, and the ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#environment"},"Environment")," treats them the same."),(0,o.kt)("p",null,'Some actors connect to the trial (we call them "client" actors) and others will wait for the trial to connect to them (we call these "service" actors).'),(0,o.kt)("h3",{id:"environment"},"Environment"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#environment"},"Environment")," is the context within which the ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#trial"},"Trial")," takes place. The Environment receives the ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#actions"},"actions")," done by the actors, usually updates an internal state, and generates an ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#observation"},"observation")," for each ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#actor"},"Actor"),"."),(0,o.kt)("p",null,"The Environment is the main integration point between Cogment and an external system, either a ",(0,o.kt)("strong",{parentName:"p"},"simulation")," or a ",(0,o.kt)("strong",{parentName:"p"},"real world system"),"."),(0,o.kt)("h2",{id:"the-specifications-file"},"The specifications file"),(0,o.kt)("p",null,"At the heart of every Cogment project is a ",(0,o.kt)("a",{parentName:"p",href:"https://yaml.org"},"YAML")," file typically called ",(0,o.kt)("inlineCode",{parentName:"p"},"cogment.yaml"),". Its primary role is to define the ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#actor-class"},"actor classes")," present within the project, including their ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#action-space"},"action")," & ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#observation-space"},"observation spaces"),"."),(0,o.kt)("h2",{id:"architecture"},"Architecture"),(0,o.kt)("p",null,"Running trials with Cogment usually involves the deployment of a cluster of services and clients. These components are either provided by the Cogment framework, depicted below in blue, or implemented for a particular project, depicted below in orange."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Cogment Architecture - Simple",src:n(7292).Z,width:"759",height:"513"})),(0,o.kt)("p",null,"User implemented components use one of the ",(0,o.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-api-guide"},"Cogment SDKs")," or directly implement the ",(0,o.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-low-level-api-guide/overview"},"underlying protocol"),". Components communicate using ",(0,o.kt)("a",{parentName:"p",href:"https://grpc.io"},"gRPC"),", clients can also communicate in a web-friendly way using ",(0,o.kt)("a",{parentName:"p",href:"https://grpc.io/docs/platforms/web/"},"gRPC-Web")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/improbable-eng/grpc-web/tree/master/go/grpcwebproxy"},"grpcwebproxy"),"."),(0,o.kt)("h3",{id:"orchestrator"},"Orchestrator"),(0,o.kt)("p",null,"The Orchestrator is the glue that binds everything together. It is responsible for running the ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#trial"},"trials")," and contacting other services as needed to ensure their execution."),(0,o.kt)("p",null,"The key aspect of Cogment's orchestrator is its capacity to handle a number of network connections in parallel while keeping its responsiveness."),(0,o.kt)("h3",{id:"controller"},"Controller"),(0,o.kt)("p",null,"The Controller is a key part of using Cogment, it initiates communication with the Orchestrator to control the execution of ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#trial"},"trials"),". It is responsible for starting ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#trial"},"Trials"),", retrieving and watching their state (including the end of the trial), or requesting trial termination."),(0,o.kt)("h3",{id:"environment-1"},"Environment"),(0,o.kt)("p",null,"The Environment implementation is accessed by the ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#orchestrator"},"Orchestrator")," to run the ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#environment"},"Environment")," during ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#trial"},"Trials"),"."),(0,o.kt)("p",null,"Using one of ",(0,o.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-api-guide"},"Cogment's SDKs"),", the Environment can be implemented as a function integrating a ",(0,o.kt)("em",{parentName:"p"},'"state of the world"')," with the ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#trial"},"Trial"),". This function performs the following tasks during the Trial:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Generate ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#observation"},"Observations")," from the current ",(0,o.kt)("em",{parentName:"li"},"state of the world"),", for example retrieving the visible objects from a 3D simulation."),(0,o.kt)("li",{parentName:"ul"},"Apply the ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#action"},"Actions"),", thus updating the ",(0,o.kt)("em",{parentName:"li"},"state of the world"),", for example changing the velocity of a moving vehicle in a race simulation."),(0,o.kt)("li",{parentName:"ul"},"Evaluate the performance of ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#actor"},"Actors")," and send them ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#reward"},"Rewards"),", for example by checking if a vehicle crossed the finish line in a race simulation."),(0,o.kt)("li",{parentName:"ul"},"Send and receive direct messages.")),(0,o.kt)("h3",{id:"actors-1"},"Actors"),(0,o.kt)("p",null,"Actors can be implemented in two different ways, either as a service or as a client. ",(0,o.kt)("strong",{parentName:"p"},"Service Actor")," implementations are accessed by the ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#orchestrator"},"Orchestrator")," during ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#trial"},"Trials"),", while ",(0,o.kt)("strong",{parentName:"p"},"Client Actor")," implementations join a Trial by initiating the communication with the Orchestrator. Client Actors implementations can ",(0,o.kt)("em",{parentName:"p"},"reach")," a Cogment deployment through ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/NAT_traversal"},"NAT traversal"),". This makes them particularly well-suited to implement human-driven Actors, in web-browsers for example."),(0,o.kt)("p",null,"Using one of ",(0,o.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-api-guide"},"Cogment's SDKs")," Actors can be implemented as functions handling the integration between a decision-making Actor (",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#agent"},"software agent")," or Human) and the ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#trial"},"Trial"),". This function performs the following tasks during the Trial:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Receive ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#observation"},"Observations")," and do ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#action"},"Actions")," in response, for example vectorizing the retrieved observation, feeding it to a neural network and converting its output to an Action."),(0,o.kt)("li",{parentName:"ul"},"Receive ",(0,o.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#reward"},"Rewards"),", for example using them to update a neural network."),(0,o.kt)("li",{parentName:"ul"},"Send and receive direct messages.")),(0,o.kt)("p",null,"Please note that rewards can also be retrieved after the fact using an ",(0,o.kt)("a",{parentName:"p",href:"#additional-optional-services"},"activity logger"),"."),(0,o.kt)("h3",{id:"additional-components"},"Additional components"),(0,o.kt)("p",null,"On top of the core components described above, a Cogment deployment can include these additional ones:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/cogment-components/cli"},(0,o.kt)("strong",{parentName:"a"},"CLI"))," is the command line tool used to bootstrap and build Cogment projects."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Datalog")," services can be used to listen to the activity during a trial (actions, observations, rewards, messages) in order to, for example, store these data for the offline training of AI agents. ",(0,o.kt)("a",{parentName:"li",href:"/docs/cogment-components/trial-datastore"},(0,o.kt)("strong",{parentName:"a"},"Trial Datastore"))," is an out-of-the-box implementation of this."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/cogment-components/model-registry"},(0,o.kt)("strong",{parentName:"a"},"Model Registry"))," handles the storage and dispatch of AI models trained with Cogment and used by the actors."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Pre-Trial Hooks")," can be used to dynamically setup Trials from a given configuration, for example changing the number of Actors or pointing to other Environment or Actor implementations."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/cogment-components/dashboard"},(0,o.kt)("strong",{parentName:"a"},"Metrics & Dasboard"))," provides a solution to monitor and visualize various metrics from the services.")),(0,o.kt)("h2",{id:"components-availability-summary"},"Components availability summary"),(0,o.kt)("p",null,"The following table summarizes how each component can either be implemented or used out of the box."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Component"),(0,o.kt)("th",{parentName:"tr",align:null},"Out-of-the-box"),(0,o.kt)("th",{parentName:"tr",align:null},"Python SDK"),(0,o.kt)("th",{parentName:"tr",align:null},"Javascript SDK"),(0,o.kt)("th",{parentName:"tr",align:null},"gRPC API"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Orchestrator"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment-components/orchestrator"},(0,o.kt)("inlineCode",{parentName:"a"},"cogment-orchestrator"))),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 implement ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-low-level-api-guide/grpc#control-api"},"Control API")," & ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-low-level-api-guide/grpc#client-actor-api"},"Client Actor API"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Controller"),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-api-reference/python#get_controllerself-endpoint"},"get controller")),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-api-reference/javascript/#getcontrollerendpoint"},"get controller")),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 use ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-low-level-api-guide/grpc#control-api"},"Control API"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Environment"),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-api-reference/python#register_environmentself-impl-impl_name-default"},"register environment impl")," & ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-api-reference/python#async-serve_all_registeredself-served_endpoint-prometheus_port-8000"},"serve")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 implement ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-low-level-api-guide/grpc#environment-api"},"Environment API"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Actor (Service)"),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-api-reference/python#register_actorself-impl-impl_name-actor_classes"},"register actor impl")," & ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-api-reference/python#async-serve_all_registeredself-served_endpoint-prometheus_port-8000"},"serve")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 implement ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-low-level-api-guide/grpc#service-actor-api"},"Service Actor API"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Actor (Client)"),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-api-reference/python#register_actorself-impl-impl_name-actor_classes"},"register actor impl")," & join trial"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-api-reference/javascript#registeractorimpl-actorname-actorclass"},"register actor impl")," & ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-api-reference/javascript#async-jointrialtrialid-endpoint-actorname"},"join trial")),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 use ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-low-level-api-guide/grpc#client-actor-api"},"Client Actor API"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"CLI"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment-components/dashboard"},(0,o.kt)("inlineCode",{parentName:"a"},"cogment-cli"))),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Trial Datastore"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment-components/trial-datastore"},(0,o.kt)("inlineCode",{parentName:"a"},"cogment-trial-datastore"))),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-api-reference/python#register_datalogself-impl"},"register datalog impl")," & ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-api-reference/python#async-serve_all_registeredself-served_endpoint-prometheus_port-8000"},"serve")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 implement ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-low-level-api-guide/grpc#datalog-api"},"Datalog API")," & Trial Datastore API (\ud83d\udea7)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Model Registry"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment-components/model-registry"},(0,o.kt)("inlineCode",{parentName:"a"},"cogment-model-registry"))),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 implement Model Registry API (\ud83d\udea7)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Pre Trial Hook"),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-api-reference/python#register_datalogself-impl"},"register pre trial hook impl")," & ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-api-reference/python#async-serve_all_registeredself-served_endpoint-prometheus_port-8000"},"serve")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 implement ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment/cogment-low-level-api-guide/grpc#hook-api"},"Pre Trial Hook API"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Metrics"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment-components/dashboard"},(0,o.kt)("inlineCode",{parentName:"a"},"cogment-metrics"))),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Dashboard"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705 ",(0,o.kt)("a",{parentName:"td",href:"/docs/cogment-components/dashboard"},(0,o.kt)("inlineCode",{parentName:"a"},"cogment-dashboard"))),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})))))}d.isMDXComponent=!0},7292:function(e,t,n){t.Z=n.p+"assets/images/cogment_architecture_simple-6f96e9992c938c99cafccbeed60512b0.png"}}]);