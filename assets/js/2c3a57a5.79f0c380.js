"use strict";(self.webpackChunkcogment_doc=self.webpackChunkcogment_doc||[]).push([[31],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(a),u=r,f=c["".concat(s,".").concat(u)]||c[u]||m[u]||i;return a?n.createElement(f,l(l({ref:t},p),{},{components:a})):n.createElement(f,l({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},8227:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=a(3117),r=(a(7294),a(3905));const i={title:"Trial Datastore",sidebar_position:3},l="Trial Datastore",o={unversionedId:"reference/cli/trial-datastore",id:"reference/cli/trial-datastore",title:"Trial Datastore",description:"This module is still in active development and should be considered a prerelease version.",source:"@site/docs/reference/cli/trial-datastore.md",sourceDirName:"reference/cli",slug:"/reference/cli/trial-datastore",permalink:"/docs/reference/cli/trial-datastore",draft:!1,tags:[],version:"current",lastUpdatedAt:1657553723,formattedLastUpdatedAt:"7/11/2022",sidebarPosition:3,frontMatter:{title:"Trial Datastore",sidebar_position:3},sidebar:"docSidebar",previous:{title:"Orchestrator",permalink:"/docs/reference/cli/orchestrator"},next:{title:"Model Registry",permalink:"/docs/reference/cli/model-registry"}},s={},d=[{value:"Command line",id:"command-line",level:2},{value:"Configuration",id:"configuration",level:2},{value:"<code>port</code>",id:"port",level:3},{value:"<code>grpc_reflection</code>",id:"grpc_reflection",level:3},{value:"<code>memory_storage_max_samples_size</code>",id:"memory_storage_max_samples_size",level:3},{value:"<code>file_storage</code>",id:"file_storage",level:3},{value:"<code>log_level</code>",id:"log_level",level:3},{value:"<code>log_file</code>",id:"log_file",level:3}],p={toc:d};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"trial-datastore"},"Trial Datastore"),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This module is still in active development and should be considered a prerelease version."))),(0,r.kt)("p",null,"Cogment Trial Datastore implements the ",(0,r.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#additional-components"},"datalog API"),". It is designed to store the trajectory samples generated by the trials for online and offline usage."),(0,r.kt)("p",null,"The Trial Datastore can work in two modes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Memory storage"),", which is the default mode, stores the data in memory up to a maximum size and then evicts the least recently used samples."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"File storage")," stores the data on disk in a file. The storage engine relies on ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/etcd-io/bbolt"},"bbolt"),".")),(0,r.kt)("h2",{id:"command-line"},"Command line"),(0,r.kt)("p",null,"The Trial Datastore is simply called this way"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ cogment services trial_datastore --port=9000 --file_storage=./database.db\n")),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"The Trial Datastore configuration can be specified either through the command line or environment variables."),(0,r.kt)("h3",{id:"port"},(0,r.kt)("inlineCode",{parentName:"h3"},"port")),(0,r.kt)("p",null,"The TCP port where to serve the ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/grpc#datalog-api"},"The Data/Log API")," and the ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/grpc#trial-datastore-api"},"Trial Datastore API"),". The former is where the orchestrator connects to output the data generated by trials, the latter is the API that can be used to retrieve online or offline stored data."),(0,r.kt)("p",null,"Can be specified as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a command line option, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"--port=12000"),","),(0,r.kt)("li",{parentName:"ul"},"an environment variable, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"COGMENT_TRIAL_DATASTORE_PORT=12000"),","),(0,r.kt)("li",{parentName:"ul"},"its default value is 9003.")),(0,r.kt)("h3",{id:"grpc_reflection"},(0,r.kt)("inlineCode",{parentName:"h3"},"grpc_reflection")),(0,r.kt)("p",null,"Whether or not to enable ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/grpc/grpc/blob/master/doc/server-reflection.md"},"gRPC reflection")," on the served endpoints."),(0,r.kt)("p",null,"Can be specified as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a command line flag, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"--grpc_reflection"),","),(0,r.kt)("li",{parentName:"ul"},"an environment variable, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"COGMENT_TRIAL_DATASTORE_GRPC_REFLECTION=1"),","),(0,r.kt)("li",{parentName:"ul"},"by default, it is disabled.")),(0,r.kt)("h3",{id:"memory_storage_max_samples_size"},(0,r.kt)("inlineCode",{parentName:"h3"},"memory_storage_max_samples_size")),(0,r.kt)("p",null,"This defines the maximum cumulated size of samples the memory storage holds before evicting least recently used trials samples. It is defined in bytes."),(0,r.kt)("p",null,"Can be specified as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a command line option, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"--memory_storage_max_samples_size=100000000"),","),(0,r.kt)("li",{parentName:"ul"},"an environment variable, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"COGMENT_TRIAL_DATASTORE_MEMORY_STORAGE_MAX_SAMPLE_SIZE=100000000"),","),(0,r.kt)("li",{parentName:"ul"},"its default value is 1073741824 Bytes, i.e. 1GB.")),(0,r.kt)("h3",{id:"file_storage"},(0,r.kt)("inlineCode",{parentName:"h3"},"file_storage")),(0,r.kt)("p",null,"Path to the database file used by the file storage. If provided, the trial datastore will use the file storage."),(0,r.kt)("p",null,"Can be specified as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a command line flag, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"--file_storage"),", to use the default value ",(0,r.kt)("inlineCode",{parentName:"li"},".cogment/trial_datastore.db"),","),(0,r.kt)("li",{parentName:"ul"},"a command line option, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"--file_storage=./path/to/trial_datastore.db"),","),(0,r.kt)("li",{parentName:"ul"},"an environment variable, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"COGMENT_TRIAL_DATASTORE_FILE_STORAGE_PATH=./path/to/trial_datastore.db"),","),(0,r.kt)("li",{parentName:"ul"},"it has no default value.")),(0,r.kt)("h3",{id:"log_level"},(0,r.kt)("inlineCode",{parentName:"h3"},"log_level")),(0,r.kt)("p",null,"Set to define the minimum level for logging. Possible values are: ",(0,r.kt)("inlineCode",{parentName:"p"},"off"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"error"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"warning"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"info"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"debug"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"trace"),". Note however that all trace and most debug level logs will only output if running the debug compiled version of the Orchestrator."),(0,r.kt)("p",null,"Can be specified as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a command line option, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"--log_level=debug"),","),(0,r.kt)("li",{parentName:"ul"},"an environment variable, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"COGMENT_LOG_LEVEL=5"),","),(0,r.kt)("li",{parentName:"ul"},"default value is info.")),(0,r.kt)("h3",{id:"log_file"},(0,r.kt)("inlineCode",{parentName:"h3"},"log_file")),(0,r.kt)("p",null,"Base file name for daily log output. The name will be suffixed with the date and a new file will be made every day. If not provided the logs go to stdout."),(0,r.kt)("p",null,"Can be specified as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a command line option, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"--log_file=./path/to/cogment.log"),","),(0,r.kt)("li",{parentName:"ul"},"an environment variable, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"COGMENT_LOG_FILE=./path/to/cogment.log"),","),(0,r.kt)("li",{parentName:"ul"},"default value is info.")))}m.isMDXComponent=!0}}]);