"use strict";(self.webpackChunkcogment_doc=self.webpackChunkcogment_doc||[]).push([[300],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=o,g=d["".concat(s,".").concat(u)]||d[u]||p[u]||a;return n?r.createElement(g,i(i({ref:t},m),{},{components:n})):r.createElement(g,i({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8059:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return m},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={title:"Model Registry",sidebar_position:3},s="Model Registry",c={unversionedId:"cogment-components/model-registry",id:"cogment-components/model-registry",title:"Model Registry",description:"Repository Latest Release",source:"@site/docs/cogment-components/model-registry.md",sourceDirName:"cogment-components",slug:"/cogment-components/model-registry",permalink:"/docs/cogment-components/model-registry",tags:[],version:"current",lastUpdatedAt:1645720139,formattedLastUpdatedAt:"2/24/2022",sidebarPosition:3,frontMatter:{title:"Model Registry",sidebar_position:3},sidebar:"docSidebar",previous:{title:"Orchestrator",permalink:"/docs/cogment-components/orchestrator"},next:{title:"Trial Datastore",permalink:"/docs/cogment-components/trial-datastore"}},m=[{value:"Usage",id:"usage",children:[],level:2},{value:"Setup",id:"setup",children:[{value:"Low level gRPC API",id:"low-level-grpc-api",children:[],level:3}],level:2}],p={toc:m};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"model-registry"},"Model Registry"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/cogment/cogment-model-registry"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/repository-cogment%2Fcogment--model--registry-%23ffb400?style=flat-square&logo=github",alt:"Repository"}))," ",(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/cogment/model-registry"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/docker/v/cogment/model-registry?label=docker%20release&sort=semver&style=flat-square",alt:"Latest Release"}))),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"This module is only available as a prerelease. It is not yet fully documented nor stable."))),(0,a.kt)("p",null,"Cogment Model Registry is an ",(0,a.kt)("strong",{parentName:"p"},"out-of-the-box")," component. It is a versioned key value store dedicated to the storage of AI models used in Cogment actors."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"\ud83d\udea7 under construction"))),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"Cogment Model Registry is available as a docker container on dockerhub as ",(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/cogment/model-registry"},(0,a.kt)("inlineCode",{parentName:"a"},"cogment/model-registry")),"."),(0,a.kt)("p",null,"It can be launched using the following;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"docker run -p 9000:9000 -v $(pwd)/relative/path/to/model/archive:/data cogment/model-registry\n")),(0,a.kt)("p",null,"If you want to provide specific configuration as environment variables use docker ",(0,a.kt)("inlineCode",{parentName:"p"},"-e")," option."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"docker run -p 9000:9000 -e COGMENT_MODEL_REGISTRY_GRPC_REFLECTION=1 -v $(pwd)/relative/path/to/model/archive:/data cogment/model-registry\n")),(0,a.kt)("p",null,"The following environment variables can be used to configure the server:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"COGMENT_MODEL_REGISTRY_PORT"),": The port to listen on. Defaults to 9000."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"COGMENT_MODEL_REGISTRY_ARCHIVE_DIR"),": The directory to store model archives. Docker images default to ",(0,a.kt)("inlineCode",{parentName:"li"},"/data"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"COGMENT_MODEL_REGISTRY_SENT_MODEL_VERSION_DATA_CHUNK_SIZE"),": The size of the model version data chunk sent by the server. Defaults to 5",(0,a.kt)("em",{parentName:"li"},"1024"),"1024 (5MB)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"COGMENT_MODEL_REGISTRY_GRPC_REFLECTION"),": Set to start a ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/grpc/grpc/blob/master/doc/server-reflection.md"},"gRPC reflection server"),". Defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,a.kt)("h3",{id:"low-level-grpc-api"},"Low level gRPC API"),(0,a.kt)("p",null,"The Model Registry implements a gRPC endpoint that is specified as part of the Cogment API:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/cogment/cogment-low-level-api-guide/grpc#model-registry-api"},"The Model registry API ",(0,a.kt)("inlineCode",{parentName:"a"},"ModelRegistry"))," that defines how to create, retrieve, update and delete models and their version.")))}d.isMDXComponent=!0}}]);