"use strict";(self.webpackChunkcogment_doc=self.webpackChunkcogment_doc||[]).push([[8],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7801:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return v},default:function(){return b},frontMatter:function(){return g},metadata:function(){return f},toc:function(){return k}});var a=n(7462),r=n(3366),o=n(7294),s=n(3905),i=n(2389),l=n(5773),c=n(6010),p="tabItem_LplD";function d(e){var t,n,r,s=e.lazy,i=e.block,d=e.defaultValue,m=e.values,u=e.groupId,h=e.className,g=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=m?m:g.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),f=(0,l.lx)(v,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===d?d:null!=(t=null!=d?d:null==(n=g.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=g[0])?void 0:r.props.value;if(null!==k&&!v.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,l.UB)(),b=y.tabGroupChoices,w=y.setTabGroupChoices,N=(0,o.useState)(k),_=N[0],T=N[1],C=[],x=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=u){var I=b[u];null!=I&&I!==_&&v.some((function(e){return e.value===I}))&&T(I)}var E=function(e){var t=e.currentTarget,n=C.indexOf(t),a=v[n].value;a!==_&&(x(t),T(a),null!=u&&w(u,a))},O=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=C.indexOf(e.currentTarget)+1;n=C[a]||C[0];break;case"ArrowLeft":var r=C.indexOf(e.currentTarget)-1;n=C[r]||C[C.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":i},h)},v.map((function(e){var t=e.value,n=e.label,r=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,key:t,ref:function(e){return C.push(e)},onKeyDown:O,onFocus:E,onClick:E},r,{className:(0,c.Z)("tabs__item",p,null==r?void 0:r.className,{"tabs__item--active":_===t})}),null!=n?n:t)}))),s?(0,o.cloneElement)(g.filter((function(e){return e.props.value===_}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},g.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==_})}))))}function m(e){var t=(0,i.Z)();return o.createElement(d,(0,a.Z)({key:String(t)},e))}var u=function(e){var t=e.children,n=e.hidden,a=e.className;return o.createElement("div",{role:"tabpanel",hidden:n,className:a},t)},h=["components"],g={title:"API Guide",sidebar_position:1},v="Cogment High-Level API guide",f={unversionedId:"cogment/cogment-api-guide",id:"cogment/cogment-api-guide",title:"API Guide",description:"NOTE: Some features aren't available in Javascript, if there's only python examples under a certain section, that feature is python only",source:"@site/docs/cogment/cogment-api-guide.mdx",sourceDirName:"cogment",slug:"/cogment/cogment-api-guide",permalink:"/docs/cogment/cogment-api-guide",tags:[],version:"current",lastUpdatedAt:1645720139,formattedLastUpdatedAt:"2/24/2022",sidebarPosition:1,frontMatter:{title:"API Guide",sidebar_position:1},sidebar:"docSidebar",previous:{title:"Glossary",permalink:"/docs/concepts/glossary"},next:{title:"Tutorial",permalink:"/docs/cogment/tutorial/"}},k=[{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"The spec file",id:"the-spec-file",children:[{value:"Compiling the spec file",id:"compiling-the-spec-file",children:[],level:3}],level:2},{value:"Environment",id:"environment",children:[{value:"Sending observations",id:"sending-observations",children:[],level:3}],level:2},{value:"Actor",id:"actor",children:[{value:"Service actor / Client actor",id:"service-actor--client-actor",children:[],level:3}],level:2},{value:"Controller",id:"controller",children:[],level:2},{value:"Rewards",id:"rewards",children:[{value:"Creating",id:"creating",children:[],level:3},{value:"Consuming",id:"consuming",children:[],level:3}],level:2},{value:"Messages",id:"messages",children:[{value:"Creating",id:"creating-1",children:[],level:3},{value:"Consuming",id:"consuming-1",children:[],level:3}],level:2},{value:"Pre-trial hook",id:"pre-trial-hook",children:[],level:2}],y={toc:k};function b(e){var t=e.components,n=(0,r.Z)(e,h);return(0,s.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"cogment-high-level-api-guide"},"Cogment High-Level API guide"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"NOTE: Some features aren't available in Javascript, if there's only python examples under a certain section, that feature is python only")),(0,s.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,s.kt)("p",null,"This document assumes the reader is familiar with the ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/core-concepts"},"Cogment Fundamentals"),"."),(0,s.kt)("p",null,"The High-level Cogment API expects users to use ",(0,s.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/"},"protocol buffers")," to declare a project's data structures. The intricacies of protobufs are beyond the scope of this document. Basic knowledge of the technology and its usage is assumed."),(0,s.kt)("h2",{id:"the-spec-file"},"The spec file"),(0,s.kt)("p",null,"An ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#actor-class"},"actor class")," is primarily defined by its ",(0,s.kt)("a",{parentName:"p",href:"../concepts/glossary#observation-space"},"observation space")," and ",(0,s.kt)("a",{parentName:"p",href:"../concepts/glossary#action-space"},"action space"),"."),(0,s.kt)("p",null,"The data structures describing these spaces are declared by using a protocol buffer message type. ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#observation"},"Observations")," and ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#action"},"actions")," will simply be instances of the matching type."),(0,s.kt)("p",null,"For example, in the following, ",(0,s.kt)("inlineCode",{parentName:"p"},"driver")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"pedestrian")," share a common view of the environment, hence use the same observation space, but have different actions available to them."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"import:\n  proto:\n    - city.proto\n\nactors:\n  driver:\n    observation:\n      space: city.Observation\n\n    action:\n      space: city.DriverAction\n\n  pedestrian:\n    observation:\n      space: city.Observation\n\n    action:\n      space: city.PedestrianAction\n")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f This shows only the relevant part of the full spec file, you can find the full list of configurable options ",(0,s.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-api-reference/cogment-yaml"},"in the reference page"),".")),(0,s.kt)("h3",{id:"compiling-the-spec-file"},"Compiling the spec file"),(0,s.kt)("p",null,"In order to use the spec file (typically named ",(0,s.kt)("inlineCode",{parentName:"p"},"cogment.yaml"),") within the various supported languages, it needs to be compiled. This is done by the code generation modules of the specific language's SDK you are using. Refer to the language specific documentation for instructions"),(0,s.kt)("h2",{id:"environment"},"Environment"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#environment"},"Environments")," are implemented by a Python function that uses a ",(0,s.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-api-reference/python#class-environmentsessionsession"},(0,s.kt)("inlineCode",{parentName:"a"},"cogment.EnvironmentSession"))," instance."),(0,s.kt)("p",null,"This function will be called once for each ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#trial"},"trial"),". This function usually consists of three sections."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The environment's ",(0,s.kt)("strong",{parentName:"li"},"initialization"),", where its internal state can be initialized and processes started. It ends with the sending of the initial observations to the actors participating in the trial."),(0,s.kt)("li",{parentName:"ul"},"Its ",(0,s.kt)("strong",{parentName:"li"},"event loop"),", where the environment iterates through the events occurring during the trial and produces ",(0,s.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#observation"},"observations")," as well as receives ",(0,s.kt)("a",{parentName:"li",href:"/docs/concepts/glossary#message"},"messages"),". In this loop the environment can end the trial on its own or the end can be requested by a ",(0,s.kt)("a",{parentName:"li",href:"#controller"},"controller"),"."),(0,s.kt)("li",{parentName:"ul"},"Its ",(0,s.kt)("strong",{parentName:"li"},"termination"),", where cleanup occurs.")),(0,s.kt)("p",null,"In the common case where all actors within a trial share the same observation, a bare-minimum environment service would look like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'async def environment(environment_session):\n  # -- Initialization --\n\n  # Retrieve the actors participating in the trial\n  actors = environment_session.get_active_actors()\n\n  # Start the trial and send a starting observation to all actors\n  environment_session.start([("*", Observation())])\n\n  # -- Event loop --\n  async for event in environment_session.event_loop():\n    if event.actions:\n      # `event.actions` is a list of the actions done by the actors\n      actions = event.actions\n      if event.type == cogment.EventType.ACTIVE:\n        # The trial is active, produce an observation in response to the actions\n        environment_session.produce_observations([("*", Observation())])\n        # Alternatively the environment can decide to **end** the trial with the following\n        # environment_session.end([("*", Observation())])\n      else:\n        # The trial termination has been requested by an external controller\n        # Produce a final observation\n        environment_session.end([("*", Observation())])\n\n    for message in event.messages:\n      # `event.messages` is a list of all the messages received by the environment (it can be empty)\n\n      # Handle each message here.\n\n  # -- Termination --\n')),(0,s.kt)("p",null,"This environment implementation needs to be registered and served so that the ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#orchestrator"},"orchestrator")," can reach it. This can be done through a ",(0,s.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-api-reference/python#class-cogmentcontext"},(0,s.kt)("inlineCode",{parentName:"a"},"Context"))," instance."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'context = cogment.Context(user_id="my_user_id", cog_settings=cog_settings)\n\ncontext.register_environment(impl=environment)\n\nawait context.serve_all_registered(cogment.ServedEndpoint(port=9000))\n')),(0,s.kt)("h3",{id:"sending-observations"},"Sending observations"),(0,s.kt)("p",null,"The environment session has 3 different methods able to send observations: ",(0,s.kt)("inlineCode",{parentName:"p"},"start"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"produce_observations")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"end"),". Each of those methods takes a list of 2-tuples destination / observation."),(0,s.kt)("p",null,"As demonstrated above, sending the same observation to all actors is done using ",(0,s.kt)("inlineCode",{parentName:"p"},'"*"')," as the destination."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'environment_session.produce_observations([("*", Observation(...))])\n')),(0,s.kt)("p",null,"It is also possible to send different observations to different actors. This can be useful to send observations of the ",(0,s.kt)("em",{parentName:"p"},"world")," from the point of view of the actor or to send partial observations."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'environment_session.produce_observations([\n  ("my_first_actor_name", Observation(...)),\n  ("my_second_actor_name", Observation(...))\n])\n')),(0,s.kt)("p",null,"Please note that the environment should always send observations such as each actor in the trial receives one."),(0,s.kt)("h2",{id:"actor"},"Actor"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#actor"},"Actors")," implementations look a lot like the ",(0,s.kt)("a",{parentName:"p",href:"#environment"},"environment's"),". They take a ",(0,s.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-api-reference/python#class-actorsessionsession"},(0,s.kt)("inlineCode",{parentName:"a"},"cogment.ActorSession"))," instance and have the same three sections: ",(0,s.kt)("strong",{parentName:"p"},"initialization"),", ",(0,s.kt)("strong",{parentName:"p"},"event loop")," and ",(0,s.kt)("strong",{parentName:"p"},"termination"),"."),(0,s.kt)("p",null,"The event loops in Actors' implementations handle three basic types of events:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"observation")," produced by the environment and that should lead to an action being done."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"rewards")," sent by other actors or the environment, we'll talk about them in more details ",(0,s.kt)("a",{parentName:"li",href:"#reward"},"below"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"messages")," sent by other actors or the environment, we'll talk about them in more details ",(0,s.kt)("a",{parentName:"li",href:"#messages"},"below"),".")),(0,s.kt)("p",null,"A typical actor implementation would look like this:"),(0,s.kt)(m,{mdxType:"Tabs"},(0,s.kt)(u,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"async def driver_actor(actor_session):\n  # -- Initialization --\n\n  # Notify that the actor is ready for the trial to start.\n  actor_session.start()\n\n  async for event in actor_session.event_loop():\n    if event.observation:\n      # `event.observation` is an instance of the Observation produced by the environment\n      observation = event.observation\n      if event.type == cogment.EventType.ACTIVE:\n      # The trial is active, it is expecting the agent to do an action\n      actor_session.do_action(DriverAction(...))\n\n    for reward in event.rewards:\n      # `event.rewards` is a list of all the rewards received by the actor (it can be empty)\n\n      # Handle each reward here.\n\n    for message in event.messages:\n      # `event.messages` is a list of all the messages received by the actor (it can be empty)\n\n      # Handle each message here.\n\n  # -- Termination --\n"))),(0,s.kt)(u,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const driverActor = async (actorSession) => {\n  // -- Initialization --\n\n  // Notify that the actor is ready for the trial to start.\n  actorSession.start();\n\n  for await (const event of actorSession.eventLoop()) {\n    if (event.observation){\n      // `event.observation` is an instance of the Observation produced by the environment\n      observation = event.observation\n      if event.type == cogment.EventType.ACTIVE:\n      // The trial is active, it is expecting the agent to do an action\n      actorSession.sendAction(new DriverAction())\n    }\n    for (const reward of event.rewards){\n      // `event.rewards` is a list of all the rewards received by the actor (it can be empty)\n\n      // Handle each reward here.\n    }\n    for (const message of event.messages){\n      // `event.messages` is a list of all the messages received by the actor (it can be empty)\n\n      // Handle each message here.\n    }\n  }\n\n  // -- Termination --\n}\n\n")))),(0,s.kt)("h3",{id:"service-actor--client-actor"},"Service actor / Client actor"),(0,s.kt)("p",null,"A Cogment app can use two types of actors, they are identical in terms of implementation but differ in how they interact with the app's ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#orchestrator"},"Orchestrator"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Service actors")," are accessible in the same way the environment is, through a ",(0,s.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-api-reference/python#class-cogmentcontext"},(0,s.kt)("inlineCode",{parentName:"a"},"Context"))," instance."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'context = cogment.Context(cog_settings=cog_settings, user_id="rps")\ncontext.register_actor(impl=actor, impl_name="driver_actor", actor_classes=["driver"])\ncontext.register_actor(impl=actor_slow, impl_name="driver_actor_slow", actor_classes=["driver"])\n\nawait context.serve_all_registered(cogment.ServedEndpoint(port=9000))\n')),(0,s.kt)("p",null,"Note that it is also through this registrating that the implementation is associated with one or more ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#actor-class"},"actor classes")," it implements."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Client actors"),", contrary to Service actors, are not served to the ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#orchestrator"},"orchestrator"),". They connect as clients of the orchestrator and join a ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#trial"},"trial")," that has started."),(0,s.kt)(m,{mdxType:"Tabs"},(0,s.kt)(u,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'context = cogment.Context(cog_settings=cog_settings, user_id="rps")\ncontext.register_actor(\n  impl=actor,\n  impl_name="driver_actor",\n  actor_classes=["driver"]\n)\n\nawait context.join_trial(\n  trial_id=trial_id,\n  cogment.Endpoint(url="grpc://orchestrator:9000"),\n  actor_name="Alice"\n)\n'))),(0,s.kt)(u,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const grpcURL = "http://someGrpcWebProxyEndpoint:port";\n\nconst service = cogment.createService({\n  cogSettings,\n  grpcURL,\n});\n\nconst actor = {\n  name: actorName,\n  actorClass: actorClass,\n};\n\nservice.registerActor(actor, actorImpl);\n\nconst trialController = service.createTrialController();\n\ntrialController.joinTrial(trialId, actor);\n')))),(0,s.kt)("p",null,"Note that a trial including one or more client actors will wait for all of them to join before any actor can start processing events."),(0,s.kt)("p",null,"Due to the different network requirements, client actors are a good fit when implementing a ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#frontend"},"frontend")," for human actors. In addition to the ",(0,s.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-api-reference/python"},"python")," SDK demonstrated above, client actors can be implemented in ",(0,s.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-api-reference/javascript"},"javascript")," using the corresponding SDK."),(0,s.kt)("h2",{id:"controller"},"Controller"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#trial"},"Trials")," are started by clients of the ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#orchestrator"},"Orchestrator")," using a Controller. Instances of a controller are built from the ",(0,s.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-api-reference/python#class-cogmentcontext"},(0,s.kt)("inlineCode",{parentName:"a"},"Context"))," instance and connect to an Orchestrator endpoint."),(0,s.kt)(m,{mdxType:"Tabs"},(0,s.kt)(u,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'controller = context.get_controller(\n  endpoint=cogment.Endpoint(url="grpc://orchestrator:9000")\n)\n'))),(0,s.kt)(u,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const service = cogment.createService({\n    cogSettings,\n    "grpc://orchestrator:9000",\n});\n\nconst trialController = service.createTrialController();\n')))),(0,s.kt)("p",null,"The controller can then be used to create trials and request their termination."),(0,s.kt)(m,{mdxType:"Tabs"},(0,s.kt)(u,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"trial_id = await controller.start_trial(trial_config=TrialConfig())\n\n# ...\n\nawait controller.terminate_trial(trial_id)\n"))),(0,s.kt)(u,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { trialId } = await trialController.startTrial(\n  someActorClass,\n  new TrialConfig()\n);\n\n// ...\n\nawait trialControler.terminateTrial(trialId);\n")))),(0,s.kt)("p",null,"The controller can also be used to subscribe to events occuring in the trials run by the Orchestrator it connects to. For example, this can be used to wait for a trial's end:"),(0,s.kt)(m,{mdxType:"Tabs"},(0,s.kt)(u,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"async for trial_info in controller.watch_trials(trial_state_filters=[\n  cogment.TrialState.ENDED\n]):\n  # The trial having id {trial_info.trial_id} ended.\n"))),(0,s.kt)(u,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"for await (const trialListEntry of trialController.watchTrials([\n  cogment.TrialState.ENDED,\n])) {\n  // The trial having id {trialListEntry.getTrialId()} ended.\n}\n")))),(0,s.kt)("p",null,"The full documentation for the controller can be found ",(0,s.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-api-reference/python#class-controller"},"here"),"."),(0,s.kt)("h2",{id:"rewards"},"Rewards"),(0,s.kt)("h3",{id:"creating"},"Creating"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#reward"},"Rewards")," are sent to ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#actor"},"actors")," from another actor or the ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#environment"},"environment"),". The ",(0,s.kt)("inlineCode",{parentName:"p"},"session")," instance passed to their implementation can be used for this purpose."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"session.add_reward(value=-1, confidence=1, tick_id=-1, to=['an_actor_name'])\n")),(0,s.kt)("p",null,"Rewards consist of an arbitrary numerical ",(0,s.kt)("strong",{parentName:"p"},"value"),' describing how the reward "sender" ',(0,s.kt)("em",{parentName:"p"},"believes")," the actor performed. It is ",(0,s.kt)("em",{parentName:"p"},"weighted")," by a value between 0 and 1 qualifying the ",(0,s.kt)("strong",{parentName:"p"},"confidence"),' of the "sender" in its reward, from a very low confidence just above 0 to a very high confidence approaching 1. The confidence value is used to collate all the rewards sent to an actor at the same time. Optionally, a reward can be provided with arbitrary user data.'),(0,s.kt)("p",null,"Each reward applies to a list of recipients (either all the actors, all the actors of a given class or a specific actor) at a specific point in time, during the trial, defined as a ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#tick"},(0,s.kt)("strong",{parentName:"a"},"tick")),"."),(0,s.kt)("p",null,"The full documentation for ",(0,s.kt)("inlineCode",{parentName:"p"},"session.add_reward")," can be found ",(0,s.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-api-reference/python#add_rewardself-value-confidence-to-tick_id-1-user_datanone"},"here"),"."),(0,s.kt)("h3",{id:"consuming"},"Consuming"),(0,s.kt)("p",null,"All the ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#reward"},"rewards")," that are sent and destined to each specific ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#actor"},"actor")," for a given point in time are collated together by the framework."),(0,s.kt)("p",null,"The ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#actor"},"actor")," can take into account the reward directly as the ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#trial"},"trial")," is running by consuming the ",(0,s.kt)("inlineCode",{parentName:"p"},'"reward"')," event in their event loop."),(0,s.kt)(m,{mdxType:"Tabs"},(0,s.kt)(u,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"async for event in actor_session.event_loop():\n  # [...]\n  for reward in event.rewards:\n    # `reward.tick_id` is the id of the tick this reward concerns.\n    tick_id = reward.tick_id\n    # `reward.value` is the aggregated value of the reward.\n    value = reward.value\n    for source_reward in reward.all_sources():\n      # Iterate over individual source rewards.\n      reward_value = source_reward.value\n      reward_confidence = source_reward.confidence\n      reward_sender = source_reward.sender\n      reward_user_data = source_reward.user_data\n"))),(0,s.kt)(u,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"for await (const event of actorSession.eventLoop()) {\n  // [...]\n  for (const reward of event.rewards) {\n    // `reward.tickId` is the id of the tick this reward concerns.\n    const tickId = reward.tickId;\n    // `reward.value` is the aggregated value of the reward.\n    const value = reward.value;\n    for (sourceReward of reward.sourcesList) {\n      // Iterate over individual source rewards.\n      const rewardValue = sourceReward.value;\n      const rewardConfidence = sourceReward.confidence;\n      const rewardSender = sourceReward.senderName;\n      const rewardUserData = sourceReward.userData;\n    }\n  }\n}\n")))),(0,s.kt)("h2",{id:"messages"},"Messages"),(0,s.kt)("h3",{id:"creating-1"},"Creating"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#message"},"Messages")," can be created and sent between ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#actor"},"actors")," or the ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#environment"},"environment")," within a trial using their ",(0,s.kt)("inlineCode",{parentName:"p"},"session")," instance."),(0,s.kt)(m,{mdxType:"Tabs"},(0,s.kt)(u,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"session.send_message(\n    user_data=MyProtobufDataStructure(...), # any protobuf data structure can be used here.\n    to=['pedestrian:*'], # send the message to all the actors of the \"pedestrian\" class\n)\n"))),(0,s.kt)(u,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const message = new Message();\nmessage.setRequest("hello");\n\n// Now we serialize into an Any protobuf message.\nconst anyPb = new MyProtobufDataStructure();\nanyPb.pack(message.serializeBinary(), "cogment_app.Message");\n\nactorSession.sendMessage({\n  from: actorName,\n  payload: anyPb,\n  to: "otherActorName",\n  trialId,\n});\n')))),(0,s.kt)("p",null,"Messages consist of an arbitrary payload, their ",(0,s.kt)("inlineCode",{parentName:"p"},"user_data/payload"),", defined as an instance of any protobuf data structure."),(0,s.kt)("p",null,"A message can be sent to one, many or all actors in a trial and / or to the environment."),(0,s.kt)("p",null,"The full documentation for ",(0,s.kt)("inlineCode",{parentName:"p"},"session.send_message")," can be found ",(0,s.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-api-reference/python#send_messageself-payload-to-to_environmentfalse"},"here"),"."),(0,s.kt)("h3",{id:"consuming-1"},"Consuming"),(0,s.kt)("p",null,"All the ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#message"},"messages")," that are sent and intended for each specific actor or environment will be received by the target actor or environment."),(0,s.kt)("p",null,"Actors or the environment can use the message directly, live, as the ",(0,s.kt)("a",{parentName:"p",href:"/docs/concepts/glossary#message"},"trial")," is running by consuming message event in their event loop."),(0,s.kt)(m,{mdxType:"Tabs"},(0,s.kt)(u,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"async for event in actor_session.event_loop():\n  # [...]\n  for message in event.messages:\n    # `message.sender_name` is the name of the actor who sent a message\n    sender_name = message.sender_name\n    # `message.payload` is the content of the message, it needs to be unpacked\n    payload = message.payload\n"))),(0,s.kt)(u,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'for await (const event of actorSession.eventLoop()) {\n  // [...]\n  for (const message of event.messages) {\n    // `message.sender_name` is the name of the actor who sent a message\n    const sender = message.sender;\n    // `message.data` is the content of the message, it needs to be unpacked\n    const data = message.data;\n\n    const newMessage = data.unpack(\n      (x: Uint8Array) => Message.deserializeBinary(x),\n      "cogment_app.Message"\n    );\n  }\n}\n')))),(0,s.kt)("h2",{id:"pre-trial-hook"},"Pre-trial hook"),(0,s.kt)("p",null,"When starting a trial from a controller an instance of the message type defined in ",(0,s.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-api-reference/cogment-yaml#trial"},(0,s.kt)("inlineCode",{parentName:"a"},"trial:config_type"))," can be provided. This instance is then passed to the registered ",(0,s.kt)("strong",{parentName:"p"},"Pre trial hooks")," when the Orcehstrator was started. The role of these hooks is to fully parametrize the trial based on the provided config. To achieve that, they can modify the default trial params defined in the ",(0,s.kt)("a",{parentName:"p",href:"/docs/cogment/cogment-api-reference/parameters"},"parameters")," to specify the environment (i.e. its endpoint, implementation name & configuration), the number and parameters of the participant actors (i.e. their name, class, endpoint, implementation name & configuration) as well as additional parameters for the trial. The pre-trial hook can therefore be used to dynamically configure trials, to act as a service endpoint registry, or a load balancer."),(0,s.kt)("p",null,"Pre-trial hook implementations are registered in the same way the environment or actor implementation are and follow the same ",(0,s.kt)("em",{parentName:"p"},"session")," pattern."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'async def my_pre_trial_hook(pre_hook_session):\n  # The trial config provided by the controller can be retrieved like that\n  trial_config = pre_hook_session.trial_config\n  # The trial params can be edited directly\n  pre_hook_session.environment_config = # [...]\n  pre_hook_session.environment_endpoint = "grpc://my_environment:9000"\n  pre_hook_session.actors = [\n    {\n      "name": "my_first_actor_name",\n      "actor_class": "driver",\n      "endpoint": "grpc://driver:9000",\n      "implementation": "driver_actor",\n      "config": # [...],\n    },\n    {\n      "name": "my_second_actor_name",\n      "actor_class": "predestrian",\n      "endpoint": "cogment://client",\n      "config": # [...],\n    },\n  ]\n  # And finally should be validated\n  pre_hook_session.validate()\n\ncontext.register_pre_trial_hook(impl=my_pre_trial_hook)\n')))}b.isMDXComponent=!0}}]);