"use strict";(self.webpackChunkcogment_doc=self.webpackChunkcogment_doc||[]).push([[295],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(h,a(a({ref:t},p),{},{components:r})):n.createElement(h,a({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2851:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],l={sidebar_position:1},s="Low-Level API guide",c={unversionedId:"reference/cogment-low-level-api-guide/overview",id:"reference/cogment-low-level-api-guide/overview",title:"Low-Level API guide",description:"Who is this for",source:"@site/docs/reference/cogment-low-level-api-guide/overview.md",sourceDirName:"reference/cogment-low-level-api-guide",slug:"/reference/cogment-low-level-api-guide/overview",permalink:"/docs/reference/cogment-low-level-api-guide/overview",tags:[],version:"current",lastUpdatedAt:1649768289,formattedLastUpdatedAt:"4/12/2022",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docSidebar",previous:{title:"Javascript SDK",permalink:"/docs/reference/javascript"},next:{title:"gRPC API v2 Reference",permalink:"/docs/reference/cogment-low-level-api-guide/grpc"}},p=[{value:"Who is this for",id:"who-is-this-for",children:[],level:2},{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Differences from the High-Level API",id:"differences-from-the-high-level-api",children:[],level:2},{value:"gRPC services",id:"grpc-services",children:[{value:"Actor Services",id:"actor-services",children:[],level:3},{value:"Environment Service",id:"environment-service",children:[],level:3},{value:"Controller API",id:"controller-api",children:[],level:3},{value:"Data Log Exporter API",id:"data-log-exporter-api",children:[],level:3},{value:"Hooks API",id:"hooks-api",children:[],level:3}],level:2},{value:"Common Data",id:"common-data",children:[{value:"Observation",id:"observation",children:[],level:3},{value:"ObservationSet",id:"observationset",children:[],level:3}],level:2}],u={toc:p};function d(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"low-level-api-guide"},"Low-Level API guide"),(0,i.kt)("h2",{id:"who-is-this-for"},"Who is this for"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Projects that involve tech stacks for which there is no high-level support yet."),(0,i.kt)("li",{parentName:"ul"},"Developers of the framework itself."),(0,i.kt)("li",{parentName:"ul"},"Curious people.")),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"The actual implementation of the Low-Level API uses gRPC. As this document is not meant to teach how to use the ",(0,i.kt)("a",{parentName:"p",href:"https://grpc.io"},"gRPC")," protocol and/or libraries, it will be assumed that the reader understands these concepts already."),(0,i.kt)("h2",{id:"differences-from-the-high-level-api"},"Differences from the High-Level API"),(0,i.kt)("p",null,"The high-level API takes a very object-oriented approach to trial management. Starting a trial creates an instance of an environment, as well as instances of agents."),(0,i.kt)("h2",{id:"grpc-services"},"gRPC services"),(0,i.kt)("p",null,"The low-level API is fully described within the gRPC service definitions found in the ",(0,i.kt)("inlineCode",{parentName:"p"},"api/cogment")," directory of the cogment framework source."),(0,i.kt)("h3",{id:"actor-services"},"Actor Services"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"api/cogment/agent.proto")," describes the service that service actor applications have to implement. And ",(0,i.kt)("inlineCode",{parentName:"p"},"api/cogment/orchestrator.proto")," describes the service that client actor applications have to implement."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"RunTrial()")," is called to run a trial with the actor.")),(0,i.kt)("h3",{id:"environment-service"},"Environment Service"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"api/cogment/environment.proto")," describes the service that environment applications have to implement."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"RunTrial()")," is called to run a trial.")),(0,i.kt)("h3",{id:"controller-api"},"Controller API"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"api/cogment/orchestrator.proto")," describes the service the orchestrator exposes that frontend applications use to create and manipulate trials. It is usually refered to as the Controller functionality because in the SDK you get a controller object that exposes these functionalities."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"StartTrial()")," to request the start of a new trial."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TerminateTrial()")," to request the end of the trial."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetTrialInfo()")," to get inforamtion from one or more trials."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"WatchTrials()")," to get streaming information about the state of all trials.")),(0,i.kt)("h3",{id:"data-log-exporter-api"},"Data Log Exporter API"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"api/cogment/data.proto")," describes the services provided to save all trial data (for archival, replay or offline analysis)."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"OnLogSample()")," to log all data samples and parameters from a trial. A sample is normally all the data from a single time step.")),(0,i.kt)("h3",{id:"hooks-api"},"Hooks API"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"api/cogment/hooks.proto")," describes the hook services provided to allow per trial configuration changes at runtime."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"OnPreTrial()")," is called before a trial starts.")),(0,i.kt)("h2",{id:"common-data"},"Common Data"),(0,i.kt)("p",null,"Most of the common data is found in ",(0,i.kt)("inlineCode",{parentName:"p"},"api/cogment/common.proto"),', but other "common" data could be found in other proto files.'),(0,i.kt)("h3",{id:"observation"},"Observation"),(0,i.kt)("p",null,"The observation class contains the observation data for an actor. The type is generic (",(0,i.kt)("inlineCode",{parentName:"p"},"bytes"),") to accomodate the different observation classes defined for each actor (after serialization)."),(0,i.kt)("h3",{id:"observationset"},"ObservationSet"),(0,i.kt)("p",null,"The observationSet class is used by the environment to send multiple observations (i.e. one per actors) to the orchestrator. The list of observations matches one-for-one with the list of actors."))}d.isMDXComponent=!0}}]);